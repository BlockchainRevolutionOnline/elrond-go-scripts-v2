#!/bin/bash
set -e


function prerequisites {
  #Prerequisites function
  echo -e
  echo -e "${GREEN}Updating system & installing some dependencies...${NC}"
  echo -e
  sudo apt -qq update  && sudo apt -y upgrade
  sudo apt -qq -y install git rsync curl zip unzip jq
  
  # Create a system user for running the service
  sudo useradd -m -d /opt/node --system --shell /usr/sbin/nologin node || echo "User already exists."
  
  echo -e "${GREEN}Task completed.${NC}"
  echo -e
}


function paths {
  # Export environment variables
  export GOPATH=$HOME/go
  export PATH=$GOPATH/bin:$PATH
}

function deploy_to_host {
    
  for HOST in $(cat target_ips) 
    do
      echo -e
      echo -e "${GREEN}Uploading scripts to host ${CYAN}$HOST${GREEN}...${NC}"
      echo -e
      rsync -avzhe "ssh -o StrictHostKeyChecking=no -p $SSHPORT -i $PEM" --exclude '.git' $SCRIPTS_LOCATION $CUSTOM_USER@$HOST:
    done
}


function go_lang {
 #Check if go is installed & install latest version
 if ! [ -x "$(command -v /snap/bin/go)" ];
   then
     #Get the latest version of GO for amd64 & installing it
     echo -e
     echo -e "${RED}GO is not installed on your system${NC}" 
     echo -e
     echo -e "${GREEN}Installing latest Go for you...${NC}"    
     sudo snap install go --classic
   else
     VERSION=$(/snap/bin/go version)
     echo -e
     echo -e "${GREEN}GO is already installed: ${CYAN}$VERSION${NC}${GREEN}...skipping install${NC}"
   fi
}

function replicant {
  #Copy the scripts in the predefined $CUSTOM_HOME folder (do not break autoupdate)
  rsync --exclude '.git' -a "$(pwd -P)" $CUSTOM_HOME
}

function git_clone {

  #Clone the elrong-go & elrong-config repos
  echo -e
  echo -e "${GREEN}Cloning into ${CYAN}elrond-go${GREEN} with tag ${CYAN}$BINARYVER${GREEN}...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork && git clone https://grsync -a "$(pwd -P)" $CUSTOM_HOMEithub.com/ElrondNetwork/elrond-go 1> /dev/null 2>&1 && cd elrond-go && git checkout --force $BINARYVER 1> /dev/null 2>&1
  
  echo -e "${GREEN}Cloning into ${CYAN}elrond-config${GREEN} with tag ${CYAN}$CONFIGVER${GREEN}...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork && git clone https://github.com/ElrondNetwork/elrond-config 1> /dev/null 2>&1 && cd elrond-config && git checkout --force $CONFIGVER 1> /dev/null 2>&1

  echo -e "${GREEN}Done ! Moving to next step...${NC}"
  echo -e
  
}


function systemd {
#Add systemd node service & syslogd logging

  echo -e
  echo -e "${GREEN}Installing systemd unit for node-$INDEX...${NC}"
  echo -e

  OFFSET=8080
  APIPORT=$(( $OFFSET + $INDEX ))

  #Create the service file for our node
  echo "[Unit]
  Description=Elrond Node-$INDEX
  After=network-online.target
  
  [Service]
  User=node
  WorkingDirectory=$WORKDIR
  ExecStart=$WORKDIR/node -use-log-view -rest-api-interface localhost:$APIPORT
  StandardOutput=journal
  StandardError=journal
  Restart=always
  RestartSec=3
  LimitNOFILE=4096
  
  [Install]
  WantedBy=multi-user.target" > elrond-node-$INDEX.service
  
  #Move files to appropriate locations & giving proper ownership
  sudo mv elrond-node-$INDEX.service /etc/systemd/system/
  sudo systemctl enable elrond-node-$INDEX.service
  
  #Limit journalctl size (temporary fix for large logs)
  echo 'SystemMaxUse=900M' | sudo tee -a /etc/systemd/journald.conf && echo 'SystemMaxFileSize=100M' | sudo tee -a /etc/systemd/journald.conf
  sudo systemctl restart systemd-journald
}

function build_node {
  #Build the node from latest tag
  echo -e
  echo -e "${GREEN}Building your node from tag ${CYAN}$BINARYVER${GREEN}...${NC}"
  echo -e
  
  #Building the node from the elrond-go repo
  echo -e "${GREEN}Downloading go modules...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go && GO111MODULE=on /snap/bin/go mod vendor 1> /dev/null 2>&1
  
  echo -e "${GREEN}Compiling binary...${NC}"
  echo -e
  cd cmd/node && /snap/bin/go build -i -v -ldflags="-X main.appVersion=$(git describe --tags --long --dirty)" 1> /dev/null 2>&1

}

function install {
  #Copy configs to /opt/node
  echo -e
  echo -e "${GREEN}Copying binary & configs for ${CYAN}node-$INDEX${GREEN} to ${CYAN}$WORKDIR${GREEN}...${NC}"
  echo -e
  
  sudo -u node mkdir -p $WORKDIR/config
  sudo cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/node/node $WORKDIR
  sudo cp $GOPATH/src/github.com/ElrondNetwork/elrond-config/* $WORKDIR/config && sudo chown node:node $WORKDIR/config/* && sudo chown node:node $WORKDIR/node 
   
}

function autoupdate {
  #Add the auto-updater.sh script to the user's crontab
  crontab -l | { cat; echo "0 * * * * /bin/bash -c $CUSTOM_HOME/elrond-go-scripts-v2/auto-updater.sh"; } | crontab -
}


function node_name {
  echo -e
  echo -e "${GREEN}Time to choose a node name...${NC}"
  echo -e
  read -p "Choose a custom name (default elrond-validator-$INDEX): " NODE_NAME
  if [ "$NODE_NAME" = "" ]
  then
      NODE_NAME="elrond-validator-$INDEX"
  fi
  sudo sed -i 's/NodeDisplayName = ""/NodeDisplayName = "'$NODE_NAME'"/' $WORKDIR/config/prefs.toml
}

function cleanup {
  #Cleanup Logs, Stats & DB
  echo -e
  echo -e "${RED}Erasing previous node data (db,logs,stats)...${NC}"
  echo -e
  
  sudo rm -rf $UPDATEWORKDIR/logs
  sudo rm -rf $UPDATEWORKDIR/stats
  sudo rm -rf $UPDATEWORKDIR/db
}

function update {
  echo -e
  echo -e "${GREEN}Updating node-$UPDATEINDEX binary & configs...${NC}"
  echo -e
  sudo cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/node/node $UPDATEWORKDIR
  sudo cp $GOPATH/src/github.com/ElrondNetwork/elrond-config/* $UPDATEWORKDIR/config && sudo chown node:node $UPDATEWORKDIR/config/*
}

function build_keygen {
  
  echo -e
  echo -e "${GREEN}Building key generator...${NC}"
  echo -e

  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/keygenerator
  /snap/bin/go build
  
}

function keys {
  #Check for keys or build Key Generator and create unique node keys
  if [[ -f $NODE_KEYS_LOCATION/node-$INDEX.zip ]]; then
                       echo -e
                       echo -e "${GREEN}Found PEMs on host for node-$INDEX. Copying them to node-$INDEX config folder...${NC}"
                       echo -e 
                       sudo unzip $NODE_KEYS_LOCATION/node-$INDEX.zip -d $WORKDIR/config/ && sleep 1 && sudo chown node:node $WORKDIR/config/*.pem
               else
                 echo -e
                 echo -e "${GREEN}No PEMs present. Generating private node keys (node will be an observer)...${NC}"
                 echo -e
                 cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/keygenerator && ./keygenerator
                 sudo mv *.pem $WORKDIR/config && sudo chown -R node:node $WORKDIR/config/*pem
    fi

}